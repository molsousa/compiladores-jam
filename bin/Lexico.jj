options
{
  static = false;
}

PARSER_BEGIN(Lexico)

import java.util.Scanner;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

class InfoToken {
    String tipo;
    String lexema;
    int linha;
    int coluna;

    public InfoToken(String tipo, String lexema, int linha, int coluna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.linha = linha;
        this.coluna = coluna;
    }

    @Override
    public String toString() {
        return String.format("Tipo: %s\nLexema: <'%s'>\nLinha: %d, Coluna: %d\n", this.tipo, this.lexema, this.linha, this.coluna);
    }
}

public class Lexico
{
    public static LinkedList<InfoToken> reservada = new LinkedList<>();
    public static LinkedList<InfoToken> simbolo = new LinkedList<>();
    private static final int MAX = 32;

    public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
        Lexico parser;
        FileInputStream arquivo;
        Scanner scanner = new Scanner(System.in);

        try {
            arquivo = new FileInputStream("fonte_1.txt");
        }
        catch(FileNotFoundException e) {
            System.out.println(e);
            return;
        }

        try {
            parser = new Lexico(arquivo);
            //parser.processarEntrada();
            /*
			do {
				menu();
				opcao = scanner.nextInt();
				buffer(scanner);
	
				switch(opcao) {
			    case 1:
			        System.out.println("\n---PALAVRAS RESERVADAS E OPERADORES---");
			        parser.imprimirTokens(reservada);
			        break;
			    case 2:
			        System.out.println("\n---CONSTANTES E IDENTIFICADORES---");
			        parser.imprimirTokens(simbolo);
					break;
				case 0:
					System.out.println("Obrigado!!");
					break;
				}
			}while(opcao != 0);
			*/
			parser.inicializar_programa();
		}
        
		catch(ParseException e) {
            System.out.println(e);
        }
        catch(TokenMgrError e) {
            System.out.println(e);
        }

        
        scanner.close();
    }

    public void inserirTokenUnico(LinkedList<InfoToken> l, String tipo, Token t) {
        for (InfoToken tok : l) {
            if (tok.lexema.equals(t.image)) {
                return;
            }
        }
        l.add(new InfoToken(tipo, t.image, t.beginLine, t.beginColumn));
    }

    public void imprimirTokens(LinkedList<InfoToken> l) {
        if (l.isEmpty()) {
            System.out.println("Lista vazia");
            return;
        }
        for (InfoToken tok : l) {
            System.out.println(tok);
        }
    }

    public static void menu() {
		System.out.println("1 - Imprimir palavras reservadas");
		System.out.println("2 - Imprimir símbolos");
		System.out.println("0 - Sair");
		System.out.print("Insira uma opção: ");
    }

    public static void buffer(Scanner scanner) {
		if(scanner.hasNextLine()) {
		  	scanner.nextLine();
		}
    }
}

PARSER_END(Lexico)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
| < "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" > 
}

// Palavras reservadas
TOKEN:
{
    < TOKEN_IF: "if" >
|   < TOKEN_ELSE: "else" >
|   < TOKEN_WHILE: "while" >
|   < TOKEN_FOR: "for" >
|   < TOKEN_VOID: "void" >
|   < TOKEN_INT: "integer" >
|   < TOKEN_FLOAT: "float" >
|   < TOKEN_CHAR: "character" >
|   < TOKEN_BOOL: "boolean" >
|   < TOKEN_RETURN: "return" >
|   < TOKEN_TRUE: "true" >
|   < TOKEN_FALSE: "false" >
|   < TOKEN_DOUBLE: "double" >
|   < TOKEN_SWITCH: "switch" >
|   < TOKEN_DO: "do" >
|   < TOKEN_TRY: "try" >
|   < TOKEN_EXCEPT: "except" >
|   < TOKEN_IMPORT: "import" >
}

// Operadores
TOKEN:
{
    < ADICAO : "+" >
|   < SUBTRACAO : "-" >
|   < MULTIPLICACAO : "*" >
|   < DIVISAO : "/" >
|   < ATRIBUICAO: "=" >
|   < MODULO: "%" >
|   < IGUAL: "==" >
|   < DIFERENTE: "!=" >
|   < MENOR: "<" >
|   < MAIOR: ">" >
|   < MAIOR_IGUAL: ">=" >
|   < MENOR_IGUAL: "<=" >
|   < AND: "&&" >
|   < NOT: "!" >
|   < OR: "||" >
|   < INCREMENTO: "++" >
|   < DECREMENTO: "--" >
|   < SOMA_ATRIBUICAO: "+=" >
|   < SUBTRACAO_ATRIBUICAO: "-=" >
|   < MULTIPLICACAO_ATRIBUICAO: "*=" >
|   < DIVISAO_ATRIBUICAO: "/=" >
|   < MODULO_ATRIBUICAO: "%/" >
}

// Simbolos reservados
TOKEN:
{
    < PONTO_VIRGULA: ";" >
|   < VIRGULA: "," >
|   < PONTO: "." >
|   < ABRE_CHAVES: "{" >
|   < FECHA_CHAVES: "}" >
|   < ABRE_PARENTESIS: "(" >
|   < FECHA_PARENTESIS: ")" >
|   < ABRE_COLCHETES: "[" >
|   < FECHA_COLCHETES: "]" >
}

// Tabela de simbolos
TOKEN:
{
  < INTEIRO: (<DIGITO>)+ >
| < REAL: (<DIGITO>)+ "." (<DIGITO>)+ >
| < IDENTIFICADOR: <LETRA> (<LETRA> | <DIGITO> | "_")* >
}

// Erros identificados
TOKEN:
{
  < IDENTIFICADOR_INVALIDO: ((<LETRA>)+ ["@","#","$","&","?"] (<LETRA> | <DIGITO> | "_")*) | ((<DIGITO>)+ (<LETRA>)+ (<LETRA>|<DIGITO>)*)> 
| < STRING_INVALIDA: "\"" (~["\"","\n","\r"])* ("\n"|"\r"|"\r\n") >
| < REAL_INVALIDO : (["+","-"])? (<DIGITO>)+ "." ~["0"-"9"] > 
| < STRING: "\"" (~["\"","\n","\r"])* "\"" >
}

// Simbolos base
TOKEN:
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA: ["a"-"z","A"-"Z"] >
}

// Qualquer outro erro
TOKEN:
{
    < SIMBOLO_INVALIDO: ~[] >
}
/*
void processarEntrada():
{
  Token t;
}
{
  (
    t = < TOKEN_IF > { inserirTokenUnico(reservada, "CONDICIONAL", t); }
  | t = < TOKEN_ELSE > { inserirTokenUnico(reservada, "CONDICIONAL", t); }
  | t = < TOKEN_WHILE > { inserirTokenUnico(reservada, "REPETICAO", t); }
  | t = < TOKEN_FOR > { inserirTokenUnico(reservada, "REPETICAO", t); }
  | t = < TOKEN_VOID > { inserirTokenUnico(reservada, "TIPO_DADO", t); }
  | t = < TOKEN_INT > { inserirTokenUnico(reservada, "TIPO_DADO", t); }
  | t = < TOKEN_FLOAT > { inserirTokenUnico(reservada, "TIPO_DADO", t); }
  | t = < TOKEN_CHAR > { inserirTokenUnico(reservada, "TIPO_DADO", t); }
  | t = < TOKEN_BOOL > { inserirTokenUnico(reservada, "TIPO_DADO", t); }
  | t = < TOKEN_RETURN > { inserirTokenUnico(reservada, "RETORNO", t); }
  | t = < TOKEN_TRUE > { inserirTokenUnico(reservada, "VALOR_BOOLEANO", t); }
  | t = < TOKEN_FALSE > { inserirTokenUnico(reservada, "VALOR_BOOLEANO", t); }
  | t = < TOKEN_DOUBLE > { inserirTokenUnico(reservada, "TIPO_DADO", t); }
  | t = < TOKEN_SWITCH > { inserirTokenUnico(reservada, "CONDICIONAL", t); }
  | t = < TOKEN_DO > { inserirTokenUnico(reservada, "REPETICAO",   t); }
  | t = < TOKEN_TRY > { inserirTokenUnico(reservada, "EXCECAO", t); }
  | t = < TOKEN_EXCEPT > { inserirTokenUnico(reservada, "EXCECAO", t); }
  | t = < TOKEN_IMPORT > { inserirTokenUnico(reservada, "IMPORT", t); }

  | t = < ADICAO > { inserirTokenUnico(reservada, "OPERADOR_ADICAO", t); }
  | t = < SUBTRACAO > { inserirTokenUnico(reservada, "OPERADOR_SUBTRACAO", t); }
  | t = < MULTIPLICACAO > { inserirTokenUnico(reservada, "OPERADOR_MULTIPLICACAO", t); }
  | t = < DIVISAO > { inserirTokenUnico(reservada, "OPERADOR_DIVISAO", t); }
  | t = < ATRIBUICAO > { inserirTokenUnico(reservada, "OPERADOR_ATRIBUICAO", t); }
  | t = < MODULO > { inserirTokenUnico(reservada, "OPERADOR_MODULO", t); }
  | t = < IGUAL > { inserirTokenUnico(reservada, "OPERADOR_IGUAL", t); }
  | t = < DIFERENTE > { inserirTokenUnico(reservada, "OPERADOR_DIFERENTE", t); }
  | t = < MENOR > { inserirTokenUnico(reservada, "OPERADOR_MENOR", t); }
  | t = < MAIOR > { inserirTokenUnico(reservada, "OPERADOR_MAIOR", t); }
  | t = < MAIOR_IGUAL > { inserirTokenUnico(reservada, "OPERADOR_MAIOR_IGUAL", t); }
  | t = < MENOR_IGUAL > { inserirTokenUnico(reservada, "OPERADOR_MENOR_IGUAL", t); }
  | t = < AND > { inserirTokenUnico(reservada, "OPERADOR_AND", t); }
  | t = < NOT > { inserirTokenUnico(reservada, "OPERADOR_NOT", t); }
  | t = < OR > { inserirTokenUnico(reservada, "OPERADOR_OR", t); }
  | t = < INCREMENTO > { inserirTokenUnico(reservada, "OPERADOR_INCREMENTO", t); }
  | t = < DECREMENTO > { inserirTokenUnico(reservada, "OPERADOR_DECREMENTO", t); }
  | t = < SOMA_ATRIBUICAO > { inserirTokenUnico(reservada, "SOMA_ATRIBUICAO", t); }
  | t = < SUBTRACAO_ATRIBUICAO > { inserirTokenUnico(reservada, "SUBTRACAO_ATRIBUICAO", t); }
  | t = < MULTIPLICACAO_ATRIBUICAO > { inserirTokenUnico(reservada, "MULTIPLICACAO_ATRIBUICAO", t); }
  | t = < DIVISAO_ATRIBUICAO > { inserirTokenUnico(reservada, "DIVISAO_ATRIBUICAO", t); }
  | t = < MODULO_ATRIBUICAO > { inserirTokenUnico(reservada, "MODULO_ATRIBUICAO", t); }

  | t = < PONTO_VIRGULA > { inserirTokenUnico(reservada, "SEPARADOR_PONTO_VIRGULA", t); }
  | t = < VIRGULA > { inserirTokenUnico(reservada, "SEPARADOR_VIRGULA", t); }
  | t = < PONTO > { inserirTokenUnico(reservada, "SEPARADOR_PONTO", t); }
  | t = < ABRE_CHAVES > { inserirTokenUnico(reservada, "SEPARADOR_ABRE_CHAVES", t); }
  | t = < FECHA_CHAVES > { inserirTokenUnico(reservada, "SEPARADOR_FECHA_CHAVES", t); }
  | t = < ABRE_PARENTESIS > { inserirTokenUnico(reservada, "SEPARADOR_ABRE_PARENTESIS", t); }
  | t = < FECHA_PARENTESIS > { inserirTokenUnico(reservada, "SEPARADOR_FECHA_PARENTESIS", t); }
  | t = < ABRE_COLCHETES > { inserirTokenUnico(reservada, "SEPARADOR_ABRE_COLCHETES", t); }
  | t = < FECHA_COLCHETES > { inserirTokenUnico(reservada, "SEPARADOR_FECHA_COLCHETES", t); }

  | t = < IDENTIFICADOR_INVALIDO > { System.out.println("IDENTIFICADOR_INVALIDO: " + t.image); }
  | t = < STRING_INVALIDA > { System.out.println("STRING_INVALIDA: "+ t.image); }
  | t = < REAL_INVALIDO > { System.out.println("REAL_INVALIDO: "+ t.image); }
  | t = < INTEIRO > { inserirTokenUnico(simbolo, "CONSTANTE_INTEIRA", t); }
  | t = < REAL > { inserirTokenUnico(simbolo, "CONSTANTE_REAL", t); }
  | t = < IDENTIFICADOR > {
      if (t.image.length() > MAX) {
          System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
      } else {
          inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
      }
    }
  | t = < STRING > { inserirTokenUnico(simbolo, "STRING_LITERAL", t); }
  | t = < SIMBOLO_INVALIDO > { System.out.println("Simbolo invalido: "+ t.image); }
  )*
  < EOF >
}
*/

// Funções para operações matemáticas
int operacao():
{
	int resultado;
}
{
	resultado = exp() < PONTO_VIRGULA > { return resultado; }
| 	< EOF >
}

int exp():
{
	int resultado, op;
}
{
	resultado = termo()
(	< ADICAO > op = termo()     { resultado = resultado + op; }
| 	< SUBTRACAO > op = termo()  { resultado = resultado - op; }
)* 								{ return resultado; } 
}

int termo():
{
	int resultado, op;
}
{
	resultado = unario()
(  	< MULTIPLICACAO > op = unario() { resultado = resultado * op; }
|  	< DIVISAO >		  op = unario() { resultado = resultado / op; }
)* 									{ return resultado; } 
}

int unario():
{
  	int resultado, op;
}
{
(
	< SUBTRACAO > resultado = fator() { op = -resultado; }
| 	resultado = fator() 			  { op = resultado; }
)									  { return resultado; }
}

int fator():
{
	Token t;
	int resultado;
}
{
(
	< ABRE_PARENTESIS > resultado = exp() < FECHA_PARENTESIS > {}
|	t = <INTEIRO> { resultado = Integer.parseInt(t.image);}
)				  { return resultado; }
}

// Função para declarar variaveis
void declarar_variavel():
{
      Token t;
}
{
    ( 
        < TOKEN_INT > { }
    |   < TOKEN_FLOAT > { }
    |   < TOKEN_CHAR > { }
    | 	< TOKEN_BOOL > { }
    |   < TOKEN_DOUBLE > { }
  )
    t = < IDENTIFICADOR > { 
        if(t.image.length() > MAX){
            System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
        else{
            inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
        }
    }
    ( 
        < VIRGULA > t = < IDENTIFICADOR > { 
            if(t.image.length() > MAX){
                System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
            }
            else{
                inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
            }
        }
    )*
    < PONTO_VIRGULA > { System.out.println("deu declarar certo variável"); }
}

void chamar_funcao():
{
    Token t;
}
{
    t = < IDENTIFICADOR > { 
        if(t.image.length() > MAX){
            System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
        else{
            inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
        }
    }
    < ABRE_PARENTESIS >
    ( 
        ( 
            < INTEIRO > { }
        |   < REAL > { }
        |   < IDENTIFICADOR > { 
                if(t.image.length() > MAX){ 
                    System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
                }
                else{
                    inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
                }
            }
        )
        ( 
            < VIRGULA > 
            ( 
                < INTEIRO > { }
            |   < REAL > { }
            |   < IDENTIFICADOR > { 
                    if(t.image.length() > MAX){
                        System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
                    }
                    else{
                        inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
                    }
                }
            )
        )*
    )?
    < FECHA_PARENTESIS >
    < PONTO_VIRGULA > { System.out.println("deu certo chamada de função"); }
}

void criar_funcoes():
{
    Token t;
}
{
    ( 
        < TOKEN_VOID > { }
    |   < TOKEN_INT > { }
    | 	< TOKEN_FLOAT > { }
    | 	< TOKEN_CHAR > { }
    | 	< TOKEN_BOOL > { }
    | 	< TOKEN_DOUBLE > { }
    )
    t = < IDENTIFICADOR > { 
        if(t.image.length() > MAX){
            System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
        else{
            inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
        }
    }
    < ABRE_PARENTESIS >
    ( 
        ( 
            < TOKEN_INT > { }
        |   < TOKEN_FLOAT > { }
        |   < TOKEN_CHAR > { }
        |   < TOKEN_BOOL > { }
        |   < TOKEN_DOUBLE > { }
        )
        t = < IDENTIFICADOR > { 
            if(t.image.length() > MAX){
                System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
            }
            else{
                inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
            }
        }
        ( 
            < VIRGULA > 
            ( 
                < TOKEN_INT > { }
            |   < TOKEN_FLOAT > { }
            |   < TOKEN_CHAR > { }
            |   < TOKEN_BOOL > { }
            |   < TOKEN_DOUBLE > { }
            )
            t = < IDENTIFICADOR > { 
                if(t.image.length() > MAX){
                    System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
                }
                else{
                    inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
                }
            }
        )*
        )?
        < FECHA_PARENTESIS >
        < ABRE_CHAVES >
        (
        declarar_variavel()
|       operacao()
|       chamar_funcao()
)*
        < FECHA_CHAVES > { System.out.println("deu certo criar função"); }
}

// Função para inicializar o programa
void inicializar_programa():
{
}
{
	(	criar_funcoes()
)*
  < EOF > { System.out.println("Pronto"); }
}