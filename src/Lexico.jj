options
{
  static = false;
}

PARSER_BEGIN(Lexico)

import java.util.Scanner;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.FileWriter;

class No {
    String tipo;
    String valor;
    LinkedList<No> filhos;
    
    public No(String tipo) {
        this.tipo = tipo;
        this.valor = null;
        this.filhos = new LinkedList<>();
    }
    
    public No(String tipo, String valor) {
        this.tipo = tipo;
        this.valor = valor;
        this.filhos = new LinkedList<>();
    }

    public void adicionarFilho(No filho) {
        if (filho != null) {
            this.filhos.add(filho);
        }
    }

    @Override
    public String toString() {
        return "No(Tipo=" + tipo + ", Valor=" + valor + ")";
    }
}

class InfoToken {
    String tipo;
    String lexema;
    int linha;
    int coluna;

    public InfoToken(String tipo, String lexema, int linha, int coluna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.linha = linha;
        this.coluna = coluna;
    }

    @Override
    public String toString() {
        return String.format("Tipo: %s\nLexema: <'%s'>\nLinha: %d, Coluna: %d\n", this.tipo, this.lexema, this.linha, this.coluna);
    }
}

public class Lexico
{
    public void escreverArvoresEmArquivo(LinkedList<No> arvores, String nomeArquivo) throws IOException {
        FileWriter writer = new FileWriter(nomeArquivo);
        writer.write("--- INÍCIO DA ÁRVORE SINTÁTICA ---\n\n");
        for (No raiz : arvores) {
            escreverNoRecursivo(raiz, 0, writer);
            writer.write("\n");
        }
        writer.write("--- FIM DA ÁRVORE SINTÁTICA ---\n");
        writer.close();
    }

    private void escreverNoRecursivo(No no, int nivel, java.io.FileWriter writer) throws IOException {
        if (no == null) return;

        for (int i = 0; i < nivel; i++) {
            writer.write("  ");
        }

        writer.write("- " + no.tipo);
        if (no.valor != null) {
            writer.write(": <" + no.valor + ">");
        }
        writer.write("\n");

        for (No filho : no.filhos) {
            escreverNoRecursivo(filho, nivel + 1, writer);
        }
    }
  
    public static LinkedList<InfoToken> reservada = new LinkedList<>();
    public static LinkedList<InfoToken> simbolo = new LinkedList<>();
    private static final int MAX = 32;

    public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
        Lexico parser;
        FileInputStream arquivo;
        Scanner scanner = new Scanner(System.in);

        try {
            arquivo = new FileInputStream("fonte_1.txt");
        }
        catch(FileNotFoundException e) {
            System.out.println(e);
            return;
        }

        try {
            parser = new Lexico(arquivo);
            parser.inicializar_programa();
		}
		catch(ParseException e) {
            System.out.println("Erro de sintaxe: " + e.getMessage());
        }
        catch(TokenMgrError e) {
            System.out.println("Erro léxico: " + e.getMessage());
        }
        scanner.close();
    }

    public void inserirTokenUnico(LinkedList<InfoToken> l, String tipo, Token t) {
        for (InfoToken tok : l) {
            if (tok.lexema.equals(t.image)) {
                return;
            }
        }
        l.add(new InfoToken(tipo, t.image, t.beginLine, t.beginColumn));
    }

    public void imprimirTokens(LinkedList<InfoToken> l) {
        if (l.isEmpty()) {
            System.out.println("Lista vazia");
            return;
        }
        for (InfoToken tok : l) {
            System.out.println(tok);
        }
    }
}

PARSER_END(Lexico)

// TOKENS (Léxico)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
| < "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

// Palavras reservadas
TOKEN:
{
    < TOKEN_IF: "if" >
|   < TOKEN_ELSE: "else" >
|   < TOKEN_WHILE: "while" >
|   < TOKEN_FOR: "for" >
|   < TOKEN_VOID: "void" >
|   < TOKEN_INT: "integer" >
|   < TOKEN_FLOAT: "float" >
|   < TOKEN_CHAR: "character" >
|   < TOKEN_BOOL: "boolean" >
|   < TOKEN_RETURN: "return" >
|   < TOKEN_TRUE: "true" >
|   < TOKEN_FALSE: "false" >
|   < TOKEN_DOUBLE: "double" >
|   < TOKEN_SWITCH: "switch" >
|   < TOKEN_DO: "do" >
|   < TOKEN_TRY: "try" >
|   < TOKEN_EXCEPT: "except" >
|   < TOKEN_IMPORT: "import" >
| 	< TOKEN_READ: "read" >
| 	< TOKEN_WRITE: "write" >
}

// Operadores
TOKEN:
{
    < ADICAO : "+" >
|   < SUBTRACAO : "-" >
|   < MULTIPLICACAO : "*" >
|   < DIVISAO : "/" >
|   < ATRIBUICAO: "=" >
|   < MODULO: "%" >
|   < IGUAL: "==" >
|   < DIFERENTE: "!=" >
|   < MENOR: "<" >
|   < MAIOR: ">" >
|   < MAIOR_IGUAL: ">=" >
|   < MENOR_IGUAL: "<=" >
|   < AND: "&&" >
|   < NOT: "!" >
|   < OR: "||" >
|   < INCREMENTO: "++" >
|   < DECREMENTO: "--" >
|   < SOMA_ATRIBUICAO: "+=" >
|   < SUBTRACAO_ATRIBUICAO: "-=" >
|   < MULTIPLICACAO_ATRIBUICAO: "*=" >
|   < DIVISAO_ATRIBUICAO: "/=" >
|   < MODULO_ATRIBUICAO: "%/" >
}

// Simbolos reservados
TOKEN:
{
    < PONTO_VIRGULA: ";" >
|   < VIRGULA: "," >
|   < PONTO: "." >
|   < ABRE_CHAVES: "{" >
|   < FECHA_CHAVES: "}" >
|   < ABRE_PARENTESIS: "(" >
|   < FECHA_PARENTESIS: ")" >
|   < ABRE_COLCHETES: "[" >
|   < FECHA_COLCHETES: "]" >
}

// Tabela de simbolos e tipos de dados
TOKEN:
{
  < INTEIRO: (<DIGITO>)+ >
| < REAL: (<DIGITO>)+ "." (<DIGITO>)+ >
| < IDENTIFICADOR: <LETRA> (<LETRA> | <DIGITO> | "_")* >
| < STRING: "\"" (~["\"","\n","\r"])* "\"" >
}

// Erros
TOKEN:
{
  < IDENTIFICADOR_INVALIDO: ((<LETRA>)+ ["@","#","$","&","?"] (<LETRA> | <DIGITO> | "_")*) | ((<DIGITO>)+ (<LETRA>)+ (<LETRA>|<DIGITO>)*)>
| < STRING_INVALIDA: "\"" (~["\"","\n","\r"])* ("\n"|"\r"|"\r\n") >
| < REAL_INVALIDO : (["+","-"])? (<DIGITO>)+ "." ~["0"-"9"] >
}

// Simbolos base
TOKEN:
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA: ["a"-"z","A"-"Z"] >
}

// Qualquer outro erro
TOKEN:
{
    < SIMBOLO_INVALIDO: ~[] >
}

// 1. BIBLIOTECAS
void inicializar_programa():
{
    LinkedList<No> arvores = new LinkedList<>();
    No arvoreAtual;
}
{
	(
		( arvoreAtual = inclusao_biblioteca() { if(arvoreAtual != null) arvores.add(arvoreAtual); } )
	  | ( arvoreAtual = criar_funcoes() { if(arvoreAtual != null) arvores.add(arvoreAtual); } )
	)*
  	<EOF> 
  	{ 
  	    System.out.println("Análise sintática finalizada");
  	    try {
  	        escreverArvoresEmArquivo(arvores, "arvores_fonte1.txt");
  	        System.out.println("Arquivo arvores_fonte1.txt gerado.");
  	    }
  	    catch (java.io.IOException e) {
  	        System.err.println("Erro ao escrever o arquivo da árvore: " + e.getMessage());
  	    }
  	}
}

No inclusao_biblioteca():
{
	Token t;
	No noImport = new No("IMPORT");
}
{
    <TOKEN_IMPORT> 
    t = <STRING> { noImport.adicionarFilho(new No("BIBLIOTECA", t.image)); }
    <PONTO_VIRGULA>
    { return noImport; }
}


// 2. BLOCO DE COMANDOS
No bloco_de_comandos():
{
    No noBloco = new No("BLOCO_COMANDOS");
    No cmd;
}
{
  	( 
  	  // Para cada comando encontrado, captura seu nó e adiciona ao bloco
  	  cmd = comando() { noBloco.adicionarFilho(cmd); } 
  	)*
  	{ return noBloco; }
}


// Regra unica de comando.
No comando():
{
    No noComando;
}
{
	// 3. DECLARAÇÃO DE VARIÁVEIS
	noComando = declarar_variavel() { return noComando; }
	// LOOKAHEAD para resolver a ambiguidade entre chamada de função e atribuição.
	| LOOKAHEAD(2) noComando = atribuicao() { return noComando; }
	// 4. CHAMADA DE FUNÇÃO
	| noComando = chamar_funcao() { return noComando; }
	// 5. ESTRUTURA CONDICIONAL (IF e IF/ELSE)
	| noComando = if_else() { return noComando; }
	// 6. ESTRUTURA DE REPETIÇÃO (WHILE)
    | noComando = laco_while() { return noComando; }
	// 7. ESTRUTURA DE REPETIÇÃO (FOR)
	| noComando = laco_for() { return noComando; }
	// 8. COMANDO DE RETORNO
    | noComando = retorno() { return noComando; }
	// 9. COMANDO DE ESCRITA
	| noComando = comando_escrita() { return noComando; }
	// 10. COMANDO DE LEITURA
	| noComando = comando_leitura() { return noComando; }
    | <PONTO_VIRGULA> { return new No("COMANDO_VAZIO"); } 
}


// Estrutura condicional if/else.
No if_else():
{
	No noIf = new No("ESTRUTURA_IF");
    No condicao;
    No blocoPrincipal;
    No blocoSenao = null;
}
{
	<TOKEN_IF> <ABRE_PARENTESIS>
	condicao = expressao() { noIf.adicionarFilho(condicao); } 
	<FECHA_PARENTESIS> <ABRE_CHAVES>
	blocoPrincipal = bloco_de_comandos() { noIf.adicionarFilho(blocoPrincipal); }
	<FECHA_CHAVES>
	(
	  blocoSenao = senao() { noIf.adicionarFilho(blocoSenao); }
	)?
	{ return noIf; }
}

No senao():
{
	No noElse = new No("BLOCO_ELSE");
    No bloco;
}
{
  	<TOKEN_ELSE> <ABRE_CHAVES>
  	bloco = bloco_de_comandos() { noElse.adicionarFilho(bloco); }
  	<FECHA_CHAVES>
  	{ return noElse; }
}

// Laço de repetição while.
No laco_while():
{
	No noWhile = new No("LACO_WHILE");
	No condicao;
	No bloco;
}
{
    <TOKEN_WHILE>
    <ABRE_PARENTESIS> 
    condicao = expressao() { noWhile.adicionarFilho(condicao); }
    <FECHA_PARENTESIS>
    <ABRE_CHAVES> 
    bloco = bloco_de_comandos() { noWhile.adicionarFilho(bloco); }
    <FECHA_CHAVES>
    { return noWhile; }
}

// Laço de repetição for.
No laco_for():
{
	No noFor = new No("LACO_FOR");
	No inicializacao = null;
	No condicao = null;
	No incremento = null;
	No bloco;
}
{
    <TOKEN_FOR>
    <ABRE_PARENTESIS> 
    ( inicializacao = atribuicao_simples() )? { noFor.adicionarFilho(inicializacao != null ? inicializacao : new No("INICIALIZACAO_VAZIA")); }
    <PONTO_VIRGULA> 
    ( condicao = expressao() )? { noFor.adicionarFilho(condicao != null ? condicao : new No("CONDICAO_VAZIA")); }
    <PONTO_VIRGULA>
    ( incremento = atribuicao_simples())? { noFor.adicionarFilho(incremento != null ? incremento : new No("INCREMENTO_VAZIO")); }
    <FECHA_PARENTESIS>
    <ABRE_CHAVES>
    bloco = bloco_de_comandos() { noFor.adicionarFilho(bloco); }
    <FECHA_CHAVES>
    { return noFor; }
}


// Comando de escrita de dados.
No comando_escrita():
{
	No noWrite = new No("ESCRITA");
	No args;
}
{
    <TOKEN_WRITE>
    <ABRE_PARENTESIS>
    args = lista_de_argumentos() { noWrite.adicionarFilho(args); }
    <FECHA_PARENTESIS>
    <PONTO_VIRGULA>
    { return noWrite; }
}


// Comando de leitura de dados.
No comando_leitura():
{
  	Token t;
  	No noRead = new No("LEITURA");
}
{
    <TOKEN_READ>
    <ABRE_PARENTESIS>
    t = <IDENTIFICADOR> { noRead.adicionarFilho(new No("IDENTIFICADOR", t.image)); }
    <FECHA_PARENTESIS>
    <PONTO_VIRGULA>
    { return noRead; }
}

// Comando de retorno de função.
No retorno():
{
	No noReturn = new No("RETORNO");
	No expr = null;
}
{
    <TOKEN_RETURN> 
    ( expr = expressao() )? { if(expr != null) noReturn.adicionarFilho(expr); }
    <PONTO_VIRGULA> 
    { return noReturn; }
}


// 11. ATRIBUIÇÕES
No atribuicao():
{
	Token t;
	No noAtrib = new No("ATRIBUICAO");
	No expr;
}
{
   	t = <IDENTIFICADOR> { noAtrib.adicionarFilho(new No("IDENTIFICADOR", t.image)); }
   	<ATRIBUICAO> 
   	expr = expressao() { noAtrib.adicionarFilho(expr); }
   	<PONTO_VIRGULA>
   	{ return noAtrib; }
}

// Regra auxiliar para o laço 'for', que é uma atribuição sem o ponto e vírgula final.
No atribuicao_simples():
{
	Token t;
	No noAtrib = new No("ATRIBUICAO_SIMPLES");
	No expr;
}
{
    t = <IDENTIFICADOR> { noAtrib.adicionarFilho(new No("IDENTIFICADOR", t.image)); }
    <ATRIBUICAO> 
    expr = expressao() { noAtrib.adicionarFilho(expr); }
    { return noAtrib; }
}


// Nível mais alto da expressão.
No expressao():
{
    No expr;
}
{
	expr = expressao_or()
	{ return expr; }
}

// 12. OPERADORES LÓGICOS (OR)
No expressao_or():
{
	Token t;
	No esq, dir;
}
{
    esq = expressao_and() 
    ( 
      t = <OR> 
      dir = expressao_and() 
      { 
        No opNode = new No("OPERACAO", t.image);
        opNode.adicionarFilho(esq);
        opNode.adicionarFilho(dir);
        esq = opNode;
      }
    )*
    { return esq; }
}

// 13. OPERADORES LÓGICOS (AND)
No expressao_and():
{
	Token t;
	No esq, dir;
}
{
    esq = expressao_relacional()
    ( 
      t = <AND> 
      dir = expressao_relacional()
      {
        No opNode = new No("OPERACAO", t.image);
        opNode.adicionarFilho(esq);
        opNode.adicionarFilho(dir);
        esq = opNode;
      }
    )*
    { return esq; }
}

// 14. OPERADORES RELACIONAIS (==, !=, <, >, <=, >=)
No expressao_relacional():
{
	Token t;
	No esq, dir;
}
{
    esq = expressao_aritmetica()
    (
        ( t = <IGUAL>
        | t = <DIFERENTE>
        | t = <MENOR>
        | t = <MAIOR>
        | t = <MENOR_IGUAL>
        | t = <MAIOR_IGUAL> )
        dir = expressao_aritmetica()
        {
          No opNode = new No("OPERACAO", t.image);
          opNode.adicionarFilho(esq);
          opNode.adicionarFilho(dir);
          esq = opNode;
        }
    )?
    { return esq; }
}

// 15. OPERADORES ARITMÉTICOS (+, -)
No expressao_aritmetica():
{
	Token t;
	No esq, dir;
}
{
	esq = termo() 
	( 
	  ( t = <ADICAO> | t = <SUBTRACAO> ) 
	  dir = termo() 
	  {
	    No opNode = new No("OPERACAO", t.image);
	    opNode.adicionarFilho(esq);
	    opNode.adicionarFilho(dir);
	    esq = opNode;
	  }
	)*
	{ return esq; }
}


// 16. OPERADORES ARITMÉTICOS (*, /)
No termo():
{
	Token t;
	No esq, dir;
}
{
	esq = fator() 
	( 
	  ( t = <MULTIPLICACAO> | t = <DIVISAO> ) 
	  dir = fator()
	  {
	    No opNode = new No("OPERACAO", t.image);
	    opNode.adicionarFilho(esq);
	    opNode.adicionarFilho(dir);
	    esq = opNode;
	  }
	)*
	{ return esq; }
}

// 17. OPERADORES UNÁRIOS (!, -)
No fator():
{
	Token t;
	No no;
}
{
    ( 
      t = <SUBTRACAO> { No opUnario = new No("OP_UNARIO", t.image); } { no = fator(); } { opUnario.adicionarFilho(no); } { return opUnario; }
    | t = <NOT>       { No opUnario = new No("OP_UNARIO", t.image); no = fator(); opUnario.adicionarFilho(no); return opUnario; } 
    )
|
	no = valor_base() { return no; }
}


// Base da recursão das expressões. Define os elementos atômicos.
No valor_base():
{
	Token t;
    No no;
}
{
	( t = <INTEIRO> { no = new No("INTEIRO", t.image); }
|   t = <REAL> { no = new No("REAL", t.image); }
|   t = <STRING> { no = new No("STRING", t.image); }
|   t = <TOKEN_TRUE> { no = new No("BOOLEANO", t.image); }
|   t = <TOKEN_FALSE> { no = new No("BOOLEANO", t.image); }
|   t = <IDENTIFICADOR> { no = new No("IDENTIFICADOR", t.image); }
|	<ABRE_PARENTESIS> no = expressao() <FECHA_PARENTESIS> 
    )
    { return no; }
}

// Função para declarar variáveis
No declarar_variavel():
{
    Token t, tipoToken;
    No noDecl = new No("DECLARACAO_VARIAVEL");
}
{
    ( tipoToken = <TOKEN_INT> 
    | tipoToken = <TOKEN_FLOAT> 
    | tipoToken = <TOKEN_CHAR> 
    | tipoToken = <TOKEN_BOOL> 
    | tipoToken = <TOKEN_DOUBLE> 
    ) { noDecl.adicionarFilho(new No("TIPO", tipoToken.image)); }

    t = <IDENTIFICADOR> {
        noDecl.adicionarFilho(new No("IDENTIFICADOR", t.image));
        if(t.image.length() > MAX){
          System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image);
        }
    }
    ( 
      <VIRGULA> 
      t = <IDENTIFICADOR> {
          noDecl.adicionarFilho(new No("IDENTIFICADOR", t.image));
          if(t.image.length() > MAX){
            System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image);
          }
      }
    )*
    <PONTO_VIRGULA> 
    { return noDecl; }
}

// Função para chamada de funções
No chamar_funcao():
{
    Token t;
    No noChamada = new No("CHAMADA_FUNCAO");
    No args = null;
}
{
    t = <IDENTIFICADOR> {
        noChamada.adicionarFilho(new No("IDENTIFICADOR", t.image));
        if(t.image.length() > MAX){
          System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image);
        }
    }
    <ABRE_PARENTESIS> 
    ( args = lista_de_argumentos() )? { noChamada.adicionarFilho(args != null ? args : new No("LISTA_ARGUMENTOS_VAZIA")); }
    <FECHA_PARENTESIS>
    <PONTO_VIRGULA>
    { return noChamada; }
}

// Regra auxiliar para lista de argumentos em chamadas de função
No lista_de_argumentos():
{
	No noLista = new No("LISTA_ARGUMENTOS");
	No expr;
}
{
    expr = expressao() { noLista.adicionarFilho(expr); } 
    ( <VIRGULA> expr = expressao() { noLista.adicionarFilho(expr); } )*
    { return noLista; }
}



// 20. DEFINIÇÃO DE FUNÇÕES
No criar_funcoes():
{
    Token t, tipoToken;
    No noFuncao = new No("DEFINICAO_FUNCAO");
    No params = null;
    No bloco;
}
{
    ( tipoToken = <TOKEN_VOID>
    | tipoToken = <TOKEN_INT>
    | tipoToken = <TOKEN_FLOAT>
    | tipoToken = <TOKEN_CHAR>
    | tipoToken = <TOKEN_BOOL>
    | tipoToken = <TOKEN_DOUBLE> 
    ) { noFuncao.adicionarFilho(new No("TIPO_RETORNO", tipoToken.image)); }
    
    t = <IDENTIFICADOR> {
        noFuncao.adicionarFilho(new No("IDENTIFICADOR", t.image));
        if(t.image.length() > MAX){
          System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image);
        }
    }
    <ABRE_PARENTESIS> 
    ( params = lista_de_parametros() )? { noFuncao.adicionarFilho(params != null ? params : new No("LISTA_PARAMETROS_VAZIA")); }
    <FECHA_PARENTESIS>
    <ABRE_CHAVES>
    bloco = bloco_de_comandos() { noFuncao.adicionarFilho(bloco); }
    <FECHA_CHAVES>
    { return noFuncao; }
}

// Regra auxiliar para lista de parâmetros em definições de função
No lista_de_parametros():
{
    Token t, tipoToken;
    No noLista = new No("LISTA_PARAMETROS");
}
{
    // Primeiro parâmetro
    ( tipoToken = <TOKEN_INT> | tipoToken = <TOKEN_FLOAT> | tipoToken = <TOKEN_CHAR> | tipoToken = <TOKEN_BOOL> | tipoToken = <TOKEN_DOUBLE> )
    t = <IDENTIFICADOR> 
    {
        No noParam = new No("PARAMETRO");
        noParam.adicionarFilho(new No("TIPO", tipoToken.image));
        noParam.adicionarFilho(new No("IDENTIFICADOR", t.image));
        noLista.adicionarFilho(noParam);
        if(t.image.length() > MAX){
           System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
    }
    
    // Mais parâmetros (opcionais)
    ( 
      <VIRGULA> 
      ( tipoToken = <TOKEN_INT> | tipoToken = <TOKEN_FLOAT> | tipoToken = <TOKEN_CHAR> | tipoToken = <TOKEN_BOOL> | tipoToken = <TOKEN_DOUBLE> )
      t = <IDENTIFICADOR>
      {
          No noParam1 = new No("PARAMETRO");
          noParam.adicionarFilho(new No("TIPO", tipoToken.image));
          noParam.adicionarFilho(new No("IDENTIFICADOR", t.image));
          noLista.adicionarFilho(noParam);
          if(t.image.length() > MAX){
          	System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
          }
      }
    )*
    { return noLista; }
}