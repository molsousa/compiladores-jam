/* Lexico.java */
/* Generated By:JavaCC: Do not edit this line. Lexico.java */
import java.util.Scanner;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

class InfoToken {
    String tipo;
    String lexema;
    int linha;
    int coluna;

    public InfoToken(String tipo, String lexema, int linha, int coluna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.linha = linha;
        this.coluna = coluna;
    }

    @Override
    public String toString() {
        return String.format("Tipo: %s\nLexema: <'%s'>\nLinha: %d, Coluna: %d\n", this.tipo, this.lexema, this.linha, this.coluna);
    }
}

public class Lexico implements LexicoConstants {
    public static LinkedList<InfoToken> reservada = new LinkedList<>();
    public static LinkedList<InfoToken> simbolo = new LinkedList<>();
    private static final int MAX = 32;

    public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
        Lexico parser;
        FileInputStream arquivo;
        Scanner scanner = new Scanner(System.in);

        try {
            arquivo = new FileInputStream("fonte_1.txt");
        }
        catch(FileNotFoundException e) {
            System.out.println(e);
            return;
        }

        try {
            parser = new Lexico(arquivo);
            parser.inicializar_programa();
                }
                catch(ParseException e) {
            System.out.println("Erro de sintaxe: " + e.getMessage());
        }
        catch(TokenMgrError e) {
            System.out.println("Erro l\u00e9xico: " + e.getMessage());
        }
        scanner.close();
    }

    public void inserirTokenUnico(LinkedList<InfoToken> l, String tipo, Token t) {
        for (InfoToken tok : l) {
            if (tok.lexema.equals(t.image)) {
                return;
            }
        }
        l.add(new InfoToken(tipo, t.image, t.beginLine, t.beginColumn));
    }

    public void imprimirTokens(LinkedList<InfoToken> l) {
        if (l.isEmpty()) {
            System.out.println("Lista vazia");
            return;
        }
        for (InfoToken tok : l) {
            System.out.println(tok);
        }
    }

// Sintático


// 1. BIBLIOTECAS
  final public void inicializar_programa() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      inclusao_biblioteca();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_VOID:
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_DOUBLE:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      criar_funcoes();
    }
    jj_consume_token(0);
System.out.println("An\u00e1lise sint\u00e1tica finalizada.");
}

  final public void inclusao_biblioteca() throws ParseException {
    jj_consume_token(TOKEN_IMPORT);
    jj_consume_token(STRING);
    jj_consume_token(PONTO_VIRGULA);
}

// 2. BLOCO DE COMANDOS
  final public void bloco_de_comandos() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_IF:
      case TOKEN_WHILE:
      case TOKEN_FOR:
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_RETURN:
      case TOKEN_DOUBLE:
      case TOKEN_READ:
      case TOKEN_WRITE:
      case PONTO_VIRGULA:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      comando();
    }
}

// Regra unica de comando.
  final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_INT:
    case TOKEN_FLOAT:
    case TOKEN_CHAR:
    case TOKEN_BOOL:
    case TOKEN_DOUBLE:{
      declarar_variavel();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(2)) {
        atribuicao();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          chamar_funcao();
          break;
          }
        case TOKEN_IF:{
          if_else();
          break;
          }
        case TOKEN_WHILE:{
          laco_while();
          break;
          }
        case TOKEN_FOR:{
          laco_for();
          break;
          }
        case TOKEN_RETURN:{
          retorno();
          break;
          }
        case TOKEN_WRITE:{
          comando_escrita();
          break;
          }
        case TOKEN_READ:{
          comando_leitura();
          break;
          }
        case PONTO_VIRGULA:{
          jj_consume_token(PONTO_VIRGULA);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

// Estrutura condicional if/else.
  final public void if_else() throws ParseException {
    jj_consume_token(TOKEN_IF);
    jj_consume_token(ABRE_PARENTESIS);
    expressao();
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(ABRE_CHAVES);
    bloco_de_comandos();
    jj_consume_token(FECHA_CHAVES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_ELSE:{
      senao();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
}

  final public void senao() throws ParseException {
    jj_consume_token(TOKEN_ELSE);
    jj_consume_token(ABRE_CHAVES);
    bloco_de_comandos();
    jj_consume_token(FECHA_CHAVES);
}

// Laço de repetição while.
  final public void laco_while() throws ParseException {
    jj_consume_token(TOKEN_WHILE);
    jj_consume_token(ABRE_PARENTESIS);
    expressao();
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(ABRE_CHAVES);
    bloco_de_comandos();
    jj_consume_token(FECHA_CHAVES);
}

// Laço de repetição for.
  final public void laco_for() throws ParseException {
    jj_consume_token(TOKEN_FOR);
    jj_consume_token(ABRE_PARENTESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      atribuicao_simples();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TRUE:
    case TOKEN_FALSE:
    case SUBTRACAO:
    case NOT:
    case ABRE_PARENTESIS:
    case INTEIRO:
    case REAL:
    case IDENTIFICADOR:
    case STRING:{
      expressao();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      atribuicao_simples();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(ABRE_CHAVES);
    bloco_de_comandos();
    jj_consume_token(FECHA_CHAVES);
}

// Comando de escrita de dados.
  final public void comando_escrita() throws ParseException {
    jj_consume_token(TOKEN_WRITE);
    jj_consume_token(ABRE_PARENTESIS);
    lista_de_argumentos();
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(PONTO_VIRGULA);
}

// Comando de leitura de dados.
  final public void comando_leitura() throws ParseException {
    jj_consume_token(TOKEN_READ);
    jj_consume_token(ABRE_PARENTESIS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(PONTO_VIRGULA);
}

// Comando de retorno de função.
  final public void retorno() throws ParseException {
    jj_consume_token(TOKEN_RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TRUE:
    case TOKEN_FALSE:
    case SUBTRACAO:
    case NOT:
    case ABRE_PARENTESIS:
    case INTEIRO:
    case REAL:
    case IDENTIFICADOR:
    case STRING:{
      expressao();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
}

// 11. ATRIBUIÇÕES
  final public void atribuicao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ATRIBUICAO);
    expressao();
    jj_consume_token(PONTO_VIRGULA);
}

// Regra auxiliar para o laço 'for', que é uma atribuição sem o ponto e vírgula final.
  final public void atribuicao_simples() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ATRIBUICAO);
    expressao();
}

// Nível mais alto da expressão. Começa com o operador de menor precedência (OR).
  final public void expressao() throws ParseException {
    expressao_or();
}

// 12. OPERADORES LÓGICOS (OR)
  final public void expressao_or() throws ParseException {
    expressao_and();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      expressao_and();
    }
}

// 13. OPERADORES LÓGICOS (AND)
  final public void expressao_and() throws ParseException {
    expressao_relacional();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      expressao_relacional();
    }
}

// 14. OPERADORES RELACIONAIS (==, !=, <, >, <=, >=)
  final public void expressao_relacional() throws ParseException {
    expressao_aritmetica();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:
    case DIFERENTE:
    case MENOR:
    case MAIOR:
    case MAIOR_IGUAL:
    case MENOR_IGUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAIOR:{
        jj_consume_token(MAIOR);
        break;
        }
      case MENOR_IGUAL:{
        jj_consume_token(MENOR_IGUAL);
        break;
        }
      case MAIOR_IGUAL:{
        jj_consume_token(MAIOR_IGUAL);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expressao_aritmetica();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

// 15. OPERADORES ARITMÉTICOS (+, -)
  final public void expressao_aritmetica() throws ParseException {
    termo();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADICAO:
      case SUBTRACAO:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADICAO:{
        jj_consume_token(ADICAO);
        break;
        }
      case SUBTRACAO:{
        jj_consume_token(SUBTRACAO);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo();
    }
}

// 16. OPERADORES ARITMÉTICOS (*, /)
  final public void termo() throws ParseException {
    fator();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLICACAO:{
        jj_consume_token(MULTIPLICACAO);
        break;
        }
      case DIVISAO:{
        jj_consume_token(DIVISAO);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fator();
    }
}

// 17. OPERADORES UNÁRIOS (!, -)
  final public void fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUBTRACAO:
    case NOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUBTRACAO:{
        jj_consume_token(SUBTRACAO);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fator();
      break;
      }
    case TOKEN_TRUE:
    case TOKEN_FALSE:
    case ABRE_PARENTESIS:
    case INTEIRO:
    case REAL:
    case IDENTIFICADOR:
    case STRING:{
      valor_base();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Base da recursão das expressões. Define os elementos atômicos.
  final public void valor_base() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEIRO:{
      jj_consume_token(INTEIRO);
      break;
      }
    case REAL:{
      jj_consume_token(REAL);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case TOKEN_TRUE:{
      jj_consume_token(TOKEN_TRUE);
      break;
      }
    case TOKEN_FALSE:{
      jj_consume_token(TOKEN_FALSE);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case ABRE_PARENTESIS:{
      jj_consume_token(ABRE_PARENTESIS);
      expressao();
      jj_consume_token(FECHA_PARENTESIS);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// Função para declarar variáveis
  final public void declarar_variavel() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_INT:{
      jj_consume_token(TOKEN_INT);
      break;
      }
    case TOKEN_FLOAT:{
      jj_consume_token(TOKEN_FLOAT);
      break;
      }
    case TOKEN_CHAR:{
      jj_consume_token(TOKEN_CHAR);
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){ System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image); }
        else{ inserirTokenUnico(simbolo, "IDENTIFICADOR", t); }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){ System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image); }
        else{ inserirTokenUnico(simbolo, "IDENTIFICADOR", t); }
    }
    jj_consume_token(PONTO_VIRGULA);
}

// Função para chamada de funções
  final public void chamar_funcao() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){ System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image); }
        else{ inserirTokenUnico(simbolo, "IDENTIFICADOR", t); }
    jj_consume_token(ABRE_PARENTESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TRUE:
    case TOKEN_FALSE:
    case SUBTRACAO:
    case NOT:
    case ABRE_PARENTESIS:
    case INTEIRO:
    case REAL:
    case IDENTIFICADOR:
    case STRING:{
      lista_de_argumentos();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(PONTO_VIRGULA);
}

// Regra auxiliar para lista de argumentos em chamadas de função
  final public void lista_de_argumentos() throws ParseException {
    expressao();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRGULA);
      expressao();
    }
}

// 20. DEFINIÇÃO DE FUNÇÕES
  final public void criar_funcoes() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_VOID:{
      jj_consume_token(TOKEN_VOID);
      break;
      }
    case TOKEN_INT:{
      jj_consume_token(TOKEN_INT);
      break;
      }
    case TOKEN_FLOAT:{
      jj_consume_token(TOKEN_FLOAT);
      break;
      }
    case TOKEN_CHAR:{
      jj_consume_token(TOKEN_CHAR);
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){ System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image);}
        else{ inserirTokenUnico(simbolo, "IDENTIFICADOR", t); }
    jj_consume_token(ABRE_PARENTESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_INT:
    case TOKEN_FLOAT:
    case TOKEN_CHAR:
    case TOKEN_BOOL:
    case TOKEN_DOUBLE:{
      lista_de_parametros();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(ABRE_CHAVES);
    bloco_de_comandos();
    jj_consume_token(FECHA_CHAVES);
}

// Regra auxiliar para lista de parâmetros em definições de função
  final public void lista_de_parametros() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_INT:{
      jj_consume_token(TOKEN_INT);
      break;
      }
    case TOKEN_FLOAT:{
      jj_consume_token(TOKEN_FLOAT);
      break;
      }
    case TOKEN_CHAR:{
      jj_consume_token(TOKEN_CHAR);
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){ System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image); }
         else{ inserirTokenUnico(simbolo, "IDENTIFICADOR", t); }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      jj_consume_token(VIRGULA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_INT:{
        jj_consume_token(TOKEN_INT);
        break;
        }
      case TOKEN_FLOAT:{
        jj_consume_token(TOKEN_FLOAT);
        break;
        }
      case TOKEN_CHAR:{
        jj_consume_token(TOKEN_CHAR);
        break;
        }
      case TOKEN_BOOL:{
        jj_consume_token(TOKEN_BOOL);
        break;
        }
      case TOKEN_DOUBLE:{
        jj_consume_token(TOKEN_DOUBLE);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){ System.out.println("AVISO: IDENTIFICADOR_LONGO: "+ t.image); }
             else{ inserirTokenUnico(simbolo, "IDENTIFICADOR", t); }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_3R_atribuicao_310_5_11()) return true;
    return false;
  }

  private boolean jj_3R_atribuicao_310_5_11()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ATRIBUICAO)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1000000,0x8f800,0x609f680,0x8f000,0x6010680,0x100,0x0,0x10060000,0x0,0x10060000,0x0,0x0,0x0,0x0,0x18000000,0x18000000,0x60000000,0x60000000,0x10000000,0x10060000,0x60000,0x8f000,0x0,0x10060000,0x0,0x8f800,0x8f000,0x8f000,0x0,0x8f000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x10020000,0x0,0x10020000,0x0,0x10000000,0x3c400100,0x10000000,0x3c400100,0x200,0x80,0x7e,0x7e,0x0,0x0,0x0,0x0,0x100,0x3c400100,0x3c400000,0x0,0x40000,0x3c400100,0x40000,0x0,0x0,0x0,0x40000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lexico(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexico(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lexico(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LexicoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lexico(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 30; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[68];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 30; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 68; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
