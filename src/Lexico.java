/* Lexico.java */
/* Generated By:JavaCC: Do not edit this line. Lexico.java */
import java.util.Scanner;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

class InfoToken {
    String tipo;
    String lexema;
    int linha;
    int coluna;

    public InfoToken(String tipo, String lexema, int linha, int coluna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.linha = linha;
        this.coluna = coluna;
    }

    @Override
    public String toString() {
        return String.format("Tipo: %s\nLexema: <'%s'>\nLinha: %d, Coluna: %d\n", this.tipo, this.lexema, this.linha, this.coluna);
    }
}

public class Lexico implements LexicoConstants {
    public static LinkedList<InfoToken> reservada = new LinkedList<>();
    public static LinkedList<InfoToken> simbolo = new LinkedList<>();
    private static final int MAX = 32;

    public static void main(String[] args) throws ParseException, TokenMgrError, FileNotFoundException {
        Lexico parser;
        FileInputStream arquivo;
        Scanner scanner = new Scanner(System.in);

        try {
            arquivo = new FileInputStream("fonte_1.txt");
        }
        catch(FileNotFoundException e) {
            System.out.println(e);
            return;
        }

        try {
            parser = new Lexico(arquivo);
                        parser.inicializar_programa();
                }

                catch(ParseException e) {
            System.out.println(e);
        }
        catch(TokenMgrError e) {
            System.out.println(e);
        }
        scanner.close();
    }

    public void inserirTokenUnico(LinkedList<InfoToken> l, String tipo, Token t) {
        for (InfoToken tok : l) {
            if (tok.lexema.equals(t.image)) {
                return;
            }
        }
        l.add(new InfoToken(tipo, t.image, t.beginLine, t.beginColumn));
    }

    public void imprimirTokens(LinkedList<InfoToken> l) {
        if (l.isEmpty()) {
            System.out.println("Lista vazia");
            return;
        }
        for (InfoToken tok : l) {
            System.out.println(tok);
        }
    }

    public static void menu() {
                System.out.println("1 - Imprimir palavras reservadas");
                System.out.println("2 - Imprimir s\u00edmbolos");
                System.out.println("0 - Sair");
                System.out.print("Insira uma op\u00e7\u00e3o: ");
    }

    public static void buffer(Scanner scanner) {
                if(scanner.hasNextLine()) {
                        scanner.nextLine();
                }
    }

  final public void utilitario() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case TOKEN_IF:
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_DOUBLE:
      case SUBTRACAO:
      case ABRE_PARENTESIS:
      case INTEIRO:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_DOUBLE:{
        declarar_variavel();
        break;
        }
      case IDENTIFICADOR:{
        chamar_funcao();
        break;
        }
      case 0:
      case SUBTRACAO:
      case ABRE_PARENTESIS:
      case INTEIRO:{
        operacao_literal();
        break;
        }
      case TOKEN_IF:{
        if_else();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void senao() throws ParseException {
    jj_consume_token(TOKEN_ELSE);
    jj_consume_token(ABRE_CHAVES);
utilitario();
    jj_consume_token(FECHA_CHAVES);
}

  final public void comparacao_booleana() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);

      break;
      }
    case INTEIRO:{
      jj_consume_token(INTEIRO);

      break;
      }
    case STRING:{
      jj_consume_token(STRING);

      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:
      case DIFERENTE:
      case MENOR:
      case MAIOR:
      case MAIOR_IGUAL:
      case MENOR_IGUAL:
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);

        break;
        }
      case MAIOR:{
        jj_consume_token(MAIOR);

        break;
        }
      case MENOR:{
        jj_consume_token(MENOR);

        break;
        }
      case MAIOR_IGUAL:{
        jj_consume_token(MAIOR_IGUAL);

        break;
        }
      case MENOR_IGUAL:{
        jj_consume_token(MENOR_IGUAL);

        break;
        }
      case AND:{
        jj_consume_token(AND);

        break;
        }
      case OR:{
        jj_consume_token(OR);

        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);

        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);

        break;
        }
      case INTEIRO:{
        jj_consume_token(INTEIRO);

        break;
        }
      case STRING:{
        jj_consume_token(STRING);

        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void if_else() throws ParseException {
    jj_consume_token(TOKEN_IF);

    jj_consume_token(ABRE_PARENTESIS);

    comparacao_booleana();
    jj_consume_token(FECHA_PARENTESIS);

    jj_consume_token(ABRE_CHAVES);

    jj_consume_token(FECHA_CHAVES);
System.out.println("deu certo criar o if_else");
}

// Funções para operações matemáticas com valores literais
  final public int operacao_literal() throws ParseException {int resultado;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUBTRACAO:
    case ABRE_PARENTESIS:
    case INTEIRO:{
      resultado = exp();
      jj_consume_token(PONTO_VIRGULA);
{if ("" != null) return resultado;}
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public int exp() throws ParseException {int resultado, op;
    resultado = termo();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADICAO:
      case SUBTRACAO:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADICAO:{
        jj_consume_token(ADICAO);
        op = termo();
resultado = resultado + op;
        break;
        }
      case SUBTRACAO:{
        jj_consume_token(SUBTRACAO);
        op = termo();
resultado = resultado - op;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public int termo() throws ParseException {int resultado, op;
    resultado = unario();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLICACAO:{
        jj_consume_token(MULTIPLICACAO);
        op = unario();
resultado = resultado * op;
        break;
        }
      case DIVISAO:{
        jj_consume_token(DIVISAO);
        op = unario();
resultado = resultado / op;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public int unario() throws ParseException {int resultado, op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUBTRACAO:{
      jj_consume_token(SUBTRACAO);
      resultado = fator();
op = -resultado;
      break;
      }
    case ABRE_PARENTESIS:
    case INTEIRO:{
      resultado = fator();
op = resultado;
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

  final public int fator() throws ParseException {Token t;
        int resultado;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABRE_PARENTESIS:{
      jj_consume_token(ABRE_PARENTESIS);
      resultado = exp();
      jj_consume_token(FECHA_PARENTESIS);

      break;
      }
    case INTEIRO:{
      t = jj_consume_token(INTEIRO);
resultado = Integer.parseInt(t.image);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return resultado;}
    throw new Error("Missing return statement in function");
}

// Função para declarar variaveis
  final public void declarar_variavel() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_INT:{
      jj_consume_token(TOKEN_INT);

      break;
      }
    case TOKEN_FLOAT:{
      jj_consume_token(TOKEN_FLOAT);

      break;
      }
    case TOKEN_CHAR:{
      jj_consume_token(TOKEN_CHAR);

      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);

      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);

      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
            System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
        else{
            inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
        }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
                System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
            }
            else{
                inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
            }
    }
    jj_consume_token(PONTO_VIRGULA);
System.out.println("deu declarar certo vari\u00e1vel");
}

  final public void chamar_funcao() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
            System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
        else{
            inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
        }
    jj_consume_token(ABRE_PARENTESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEIRO:
    case REAL:
    case IDENTIFICADOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEIRO:{
        jj_consume_token(INTEIRO);

        break;
        }
      case REAL:{
        jj_consume_token(REAL);

        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
                    System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
                }
                else{
                    inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
                }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRGULA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        jj_consume_token(VIRGULA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEIRO:{
          jj_consume_token(INTEIRO);

          break;
          }
        case REAL:{
          jj_consume_token(REAL);

          break;
          }
        case IDENTIFICADOR:{
          jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
                        System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
                    }
                    else{
                        inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
                    }
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(PONTO_VIRGULA);
System.out.println("deu certo chamada de fun\u00e7\u00e3o");
}

  final public void criar_funcoes() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_VOID:{
      jj_consume_token(TOKEN_VOID);

      break;
      }
    case TOKEN_INT:{
      jj_consume_token(TOKEN_INT);

      break;
      }
    case TOKEN_FLOAT:{
      jj_consume_token(TOKEN_FLOAT);

      break;
      }
    case TOKEN_CHAR:{
      jj_consume_token(TOKEN_CHAR);

      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);

      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);

      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
            System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
        }
        else{
            inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
        }
    jj_consume_token(ABRE_PARENTESIS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_INT:
    case TOKEN_FLOAT:
    case TOKEN_CHAR:
    case TOKEN_BOOL:
    case TOKEN_DOUBLE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_INT:{
        jj_consume_token(TOKEN_INT);

        break;
        }
      case TOKEN_FLOAT:{
        jj_consume_token(TOKEN_FLOAT);

        break;
        }
      case TOKEN_CHAR:{
        jj_consume_token(TOKEN_CHAR);

        break;
        }
      case TOKEN_BOOL:{
        jj_consume_token(TOKEN_BOOL);

        break;
        }
      case TOKEN_DOUBLE:{
        jj_consume_token(TOKEN_DOUBLE);

        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
                System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
            }
            else{
                inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
            }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VIRGULA:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        jj_consume_token(VIRGULA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TOKEN_INT:{
          jj_consume_token(TOKEN_INT);

          break;
          }
        case TOKEN_FLOAT:{
          jj_consume_token(TOKEN_FLOAT);

          break;
          }
        case TOKEN_CHAR:{
          jj_consume_token(TOKEN_CHAR);

          break;
          }
        case TOKEN_BOOL:{
          jj_consume_token(TOKEN_BOOL);

          break;
          }
        case TOKEN_DOUBLE:{
          jj_consume_token(TOKEN_DOUBLE);

          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(IDENTIFICADOR);
if(t.image.length() > MAX){
                    System.out.println("IDENTIFICADOR_LONGO: "+ t.image);
                }
                else{
                    inserirTokenUnico(simbolo, "IDENTIFICADOR", t);
                }
      }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESIS);
    jj_consume_token(ABRE_CHAVES);
    utilitario();
    jj_consume_token(FECHA_CHAVES);
System.out.println("deu certo criar fun\u00e7\u00e3o");
}

// Função para inicializar o programa
  final public void inicializar_programa() throws ParseException {
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_VOID:
      case TOKEN_INT:
      case TOKEN_FLOAT:
      case TOKEN_CHAR:
      case TOKEN_BOOL:
      case TOKEN_DOUBLE:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
      criar_funcoes();
    }
    jj_consume_token(0);
System.out.println("Pronto");
}

  /** Generated Token Manager. */
  public LexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x408f081,0x408f081,0x0,0x80000000,0x80000000,0x0,0x4000001,0x6000000,0x6000000,0x18000000,0x18000000,0x4000000,0x0,0x8f000,0x0,0x0,0x0,0x0,0x0,0x8f800,0x8f000,0x0,0x8f000,0x8f000,0x8f800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x5100000,0x5100000,0x45000000,0xbf,0xbf,0x45000000,0x1100000,0x0,0x0,0x0,0x0,0x1100000,0x1100000,0x0,0x10000,0x7000000,0x10000,0x7000000,0x7000000,0x0,0x0,0x10000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Lexico(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexico(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexico(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LexicoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexico(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[66];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 25; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 66; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
